{
  "parser": "@typescript-eslint/parser",
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/jsx-runtime",
    "react-app"
  ],
  "plugins": [
    "import-newlines",
    "react"
  ],
  "env": {
    "browser": true
  },
  "rules": {
    "@typescript-eslint/consistent-type-definitions": ["error", "type"],
    "import/extensions": [
      "error",
      "ignorePackages",
      {
        "ts": "never",
        "tsx": "never"
      }
    ],
    "no-null/no-null": "off",
    "arrow-body-style": ["error", "as-needed"],
    "@typescript-eslint/consistent-type-assertions": ["error", {
      "assertionStyle": "as"
    }],
    "comma-dangle": ["error", "always-multiline"],
    "import-newlines/enforce": ["error",{
      "items": 3
    }],
    "object-curly-spacing": ["error", "always"],
    "object-property-newline": ["error", { "allowAllPropertiesOnSameLine": true }],
    "multiline-ternary": ["error", "always-multiline"],
    "key-spacing": ["error", { "beforeColon": false }],
    "block-spacing": "error",
    "semi-spacing": "error",
    "semi": ["error", "always"],
    "indent": ["error", 2, {"offsetTernaryExpressions": true}],
    "brace-style": ["error", "1tbs"],
    "no-multi-spaces": ["error"],
    "array-bracket-spacing": ["error", "never"],
    "comma-spacing": ["error", { "before": false, "after": true }],
    "computed-property-spacing": ["error", "never"],
    "quote-props": ["error", "consistent-as-needed"],
    "space-in-parens": ["error", "never"],
    "jsx-quotes": ["error", "prefer-single"],
    "quotes": ["error", "single"],
    "prefer-template": "error",
    "keyword-spacing": "error",
    "space-infix-ops": ["error"],
    "template-curly-spacing": "error",
    "react/jsx-closing-bracket-location": ["error"],
    "react/jsx-closing-tag-location": "error",
    "react/jsx-equals-spacing": ["error", "never"],
    "react/jsx-tag-spacing": ["error", {
      "closingSlash": "never",
      "beforeSelfClosing": "always",
      "afterOpening": "never",
      "beforeClosing": "never"
    }],
    "react/jsx-indent": ["error", 2],
    "react/jsx-indent-props": ["error", 2],
    "react/jsx-wrap-multilines": ["error", {
      "declaration": "parens-new-line",
      "assignment": "parens-new-line",
      "return": "parens-new-line",
      "arrow": "parens-new-line",
      "condition": "ignore",
      "logical": "ignore",
      "prop": "ignore"
    }],
    "react/jsx-max-props-per-line": ["error", {
      "maximum": 1,
      "when": "multiline"
    }],
    "react/self-closing-comp": "error",
    "react/prop-types": "off",
    "@typescript-eslint/explicit-function-return-type": ["error", {
      "allowExpressions": true,
      "allowTypedFunctionExpressions": true,
      "allowHigherOrderFunctions": true,
      "allowDirectConstAssertionInArrowFunctions": false,
      "allowConciseArrowFunctionExpressionsStartingWithVoid": false
    }],
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "property",
        "format": ["camelCase"]
      },
      {
        "selector": "class",
        "format": ["PascalCase"]
      },
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "prefix": ["I"]
      },
      {
        "selector": "typeParameter",
        "format": ["PascalCase"],
        "prefix": ["T"]
      },
      {
        "selector": "memberLike",
        "modifiers": ["private", "public", "protected"],
        "format": ["camelCase"],
        "leadingUnderscore": "forbid"
      },
      {
        "selector": [
          "classProperty",
          "typeProperty",
          "classMethod",
          "objectLiteralMethod",
          "typeMethod",
          "accessor",
          "enumMember"
        ],
        "modifiers": ["destructured", "requiresQuotes"],
        "format": null
      },
      {
        "selector": [
          "objectLiteralProperty"
        ],
        "format": ["PascalCase", "camelCase"]
      }
    ]
  },
  "settings": {
    "react": {
      "version": "detect"
    },
    "import/resolver": {
      "node": { "extensions": [ ".ts", ".tsx" ] }
    }
  }
}
